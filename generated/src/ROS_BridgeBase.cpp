
// AUTO GENERATED by vnxcppcodegen

#include <pilot/ros_bridge/package.hxx>
#include <pilot/ros_bridge/ROS_BridgeBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <automy/basic/Transform3D.hxx>
#include <pilot/BatteryState.hxx>
#include <pilot/CostMapData.hxx>
#include <pilot/EmergencyState.hxx>
#include <pilot/IOBoardData.hxx>
#include <pilot/LaserScan.hxx>
#include <pilot/OccupancyMapData.hxx>
#include <pilot/Odometry.hxx>
#include <pilot/Path2D.hxx>
#include <pilot/PlatformInfo.hxx>
#include <pilot/Pose2D.hxx>
#include <pilot/PoseArray2D.hxx>
#include <pilot/PowerState.hxx>
#include <pilot/RelayBoardData.hxx>
#include <pilot/RoadMapData.hxx>
#include <pilot/SystemState.hxx>
#include <pilot/USBoardData.hxx>
#include <pilot/kinematics/bicycle/DriveState.hxx>
#include <pilot/kinematics/differential/DriveState.hxx>
#include <pilot/kinematics/mecanum/DriveState.hxx>
#include <pilot/kinematics/omnidrive/DriveState.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/TopicPtr.hpp>

#include <vnx/vnx.h>


namespace pilot {
namespace ros_bridge {


const vnx::Hash64 ROS_BridgeBase::VNX_TYPE_HASH(0xfb8d4538783631feull);
const vnx::Hash64 ROS_BridgeBase::VNX_CODE_HASH(0x3e2eeb70c377b48full);

ROS_BridgeBase::ROS_BridgeBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".export_tf", export_tf);
	vnx::read_config(vnx_name + ".import_map", import_map);
	vnx::read_config(vnx_name + ".export_map", export_map);
	vnx::read_config(vnx_name + ".pilot_topics", pilot_topics);
	vnx::read_config(vnx_name + ".base_frame", base_frame);
	vnx::read_config(vnx_name + ".odom_frame", odom_frame);
	vnx::read_config(vnx_name + ".map_frame", map_frame);
	vnx::read_config(vnx_name + ".platform_interface_server", platform_interface_server);
	vnx::read_config(vnx_name + ".max_queue_ms_vnx", max_queue_ms_vnx);
	vnx::read_config(vnx_name + ".max_publish_queue_ros", max_publish_queue_ros);
	vnx::read_config(vnx_name + ".max_subscribe_queue_ros", max_subscribe_queue_ros);
}

vnx::Hash64 ROS_BridgeBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string ROS_BridgeBase::get_type_name() const {
	return "pilot.ros_bridge.ROS_Bridge";
}

const vnx::TypeCode* ROS_BridgeBase::get_type_code() const {
	return pilot::ros_bridge::vnx_native_type_code_ROS_BridgeBase;
}

void ROS_BridgeBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = pilot::ros_bridge::vnx_native_type_code_ROS_BridgeBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, export_tf);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, import_map);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, export_map);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, pilot_topics);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, base_frame);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, odom_frame);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, map_frame);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, platform_interface_server);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, max_queue_ms_vnx);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, max_publish_queue_ros);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, max_subscribe_queue_ros);
	_visitor.type_end(*_type_code);
}

void ROS_BridgeBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"export_tf\": "; vnx::write(_out, export_tf);
	_out << ", \"import_map\": "; vnx::write(_out, import_map);
	_out << ", \"export_map\": "; vnx::write(_out, export_map);
	_out << ", \"pilot_topics\": "; vnx::write(_out, pilot_topics);
	_out << ", \"base_frame\": "; vnx::write(_out, base_frame);
	_out << ", \"odom_frame\": "; vnx::write(_out, odom_frame);
	_out << ", \"map_frame\": "; vnx::write(_out, map_frame);
	_out << ", \"platform_interface_server\": "; vnx::write(_out, platform_interface_server);
	_out << ", \"max_queue_ms_vnx\": "; vnx::write(_out, max_queue_ms_vnx);
	_out << ", \"max_publish_queue_ros\": "; vnx::write(_out, max_publish_queue_ros);
	_out << ", \"max_subscribe_queue_ros\": "; vnx::write(_out, max_subscribe_queue_ros);
	_out << "}";
}

void ROS_BridgeBase::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object ROS_BridgeBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "pilot.ros_bridge.ROS_Bridge";
	_object["export_tf"] = export_tf;
	_object["import_map"] = import_map;
	_object["export_map"] = export_map;
	_object["pilot_topics"] = pilot_topics;
	_object["base_frame"] = base_frame;
	_object["odom_frame"] = odom_frame;
	_object["map_frame"] = map_frame;
	_object["platform_interface_server"] = platform_interface_server;
	_object["max_queue_ms_vnx"] = max_queue_ms_vnx;
	_object["max_publish_queue_ros"] = max_publish_queue_ros;
	_object["max_subscribe_queue_ros"] = max_subscribe_queue_ros;
	return _object;
}

void ROS_BridgeBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "base_frame") {
			_entry.second.to(base_frame);
		} else if(_entry.first == "export_map") {
			_entry.second.to(export_map);
		} else if(_entry.first == "export_tf") {
			_entry.second.to(export_tf);
		} else if(_entry.first == "import_map") {
			_entry.second.to(import_map);
		} else if(_entry.first == "map_frame") {
			_entry.second.to(map_frame);
		} else if(_entry.first == "max_publish_queue_ros") {
			_entry.second.to(max_publish_queue_ros);
		} else if(_entry.first == "max_queue_ms_vnx") {
			_entry.second.to(max_queue_ms_vnx);
		} else if(_entry.first == "max_subscribe_queue_ros") {
			_entry.second.to(max_subscribe_queue_ros);
		} else if(_entry.first == "odom_frame") {
			_entry.second.to(odom_frame);
		} else if(_entry.first == "pilot_topics") {
			_entry.second.to(pilot_topics);
		} else if(_entry.first == "platform_interface_server") {
			_entry.second.to(platform_interface_server);
		}
	}
}

vnx::Variant ROS_BridgeBase::get_field(const std::string& _name) const {
	if(_name == "export_tf") {
		return vnx::Variant(export_tf);
	}
	if(_name == "import_map") {
		return vnx::Variant(import_map);
	}
	if(_name == "export_map") {
		return vnx::Variant(export_map);
	}
	if(_name == "pilot_topics") {
		return vnx::Variant(pilot_topics);
	}
	if(_name == "base_frame") {
		return vnx::Variant(base_frame);
	}
	if(_name == "odom_frame") {
		return vnx::Variant(odom_frame);
	}
	if(_name == "map_frame") {
		return vnx::Variant(map_frame);
	}
	if(_name == "platform_interface_server") {
		return vnx::Variant(platform_interface_server);
	}
	if(_name == "max_queue_ms_vnx") {
		return vnx::Variant(max_queue_ms_vnx);
	}
	if(_name == "max_publish_queue_ros") {
		return vnx::Variant(max_publish_queue_ros);
	}
	if(_name == "max_subscribe_queue_ros") {
		return vnx::Variant(max_subscribe_queue_ros);
	}
	return vnx::Variant();
}

void ROS_BridgeBase::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "export_tf") {
		_value.to(export_tf);
	} else if(_name == "import_map") {
		_value.to(import_map);
	} else if(_name == "export_map") {
		_value.to(export_map);
	} else if(_name == "pilot_topics") {
		_value.to(pilot_topics);
	} else if(_name == "base_frame") {
		_value.to(base_frame);
	} else if(_name == "odom_frame") {
		_value.to(odom_frame);
	} else if(_name == "map_frame") {
		_value.to(map_frame);
	} else if(_name == "platform_interface_server") {
		_value.to(platform_interface_server);
	} else if(_name == "max_queue_ms_vnx") {
		_value.to(max_queue_ms_vnx);
	} else if(_name == "max_publish_queue_ros") {
		_value.to(max_publish_queue_ros);
	} else if(_name == "max_subscribe_queue_ros") {
		_value.to(max_subscribe_queue_ros);
	} else {
		throw std::logic_error("no such field: '" + _name + "'");
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const ROS_BridgeBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, ROS_BridgeBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* ROS_BridgeBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> ROS_BridgeBase::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "pilot.ros_bridge.ROS_Bridge";
	type_code->type_hash = vnx::Hash64(0xfb8d4538783631feull);
	type_code->code_hash = vnx::Hash64(0x3e2eeb70c377b48full);
	type_code->is_native = true;
	type_code->native_size = sizeof(::pilot::ros_bridge::ROS_BridgeBase);
	type_code->methods.resize(9);
	type_code->methods[0] = ::vnx::ModuleInterface_vnx_get_config_object::static_get_type_code();
	type_code->methods[1] = ::vnx::ModuleInterface_vnx_get_config::static_get_type_code();
	type_code->methods[2] = ::vnx::ModuleInterface_vnx_set_config_object::static_get_type_code();
	type_code->methods[3] = ::vnx::ModuleInterface_vnx_set_config::static_get_type_code();
	type_code->methods[4] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[5] = ::vnx::ModuleInterface_vnx_get_module_info::static_get_type_code();
	type_code->methods[6] = ::vnx::ModuleInterface_vnx_restart::static_get_type_code();
	type_code->methods[7] = ::vnx::ModuleInterface_vnx_stop::static_get_type_code();
	type_code->methods[8] = ::vnx::ModuleInterface_vnx_self_test::static_get_type_code();
	type_code->fields.resize(11);
	{
		auto& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "export_tf";
		field.code = {12, 12, 5};
	}
	{
		auto& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "import_map";
		field.code = {12, 23, 2, 4, 10, 23, 2, 4, 5, 32, 32, 12, 5};
	}
	{
		auto& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "export_map";
		field.code = {12, 23, 2, 4, 6, 12, 5, 32};
	}
	{
		auto& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "pilot_topics";
		field.code = {12, 12, 5};
	}
	{
		auto& field = type_code->fields[4];
		field.is_extended = true;
		field.name = "base_frame";
		field.value = vnx::to_string("base_link");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "odom_frame";
		field.value = vnx::to_string("odom");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[6];
		field.is_extended = true;
		field.name = "map_frame";
		field.value = vnx::to_string("map");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[7];
		field.is_extended = true;
		field.name = "platform_interface_server";
		field.value = vnx::to_string("PlatformInterface");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 4;
		field.name = "max_queue_ms_vnx";
		field.value = vnx::to_string(100);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[9];
		field.data_size = 4;
		field.name = "max_publish_queue_ros";
		field.value = vnx::to_string(1);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[10];
		field.data_size = 4;
		field.name = "max_subscribe_queue_ros";
		field.value = vnx::to_string(1);
		field.code = {7};
	}
	type_code->build();
	return type_code;
}

void ROS_BridgeBase::vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) {
	const auto* _type_code = _value->get_type_code();
	while(_type_code) {
		switch(_type_code->type_hash) {
			case 0xe762feb1b334b36dull:
				handle(std::static_pointer_cast<const ::automy::basic::Transform3D>(_value));
				return;
			case 0xc6790e4d7b66f791ull:
				handle(std::static_pointer_cast<const ::pilot::BatteryState>(_value));
				return;
			case 0x4d2c5b6d1a2f4dafull:
				handle(std::static_pointer_cast<const ::pilot::CostMapData>(_value));
				return;
			case 0x77fc634da8371a8eull:
				handle(std::static_pointer_cast<const ::pilot::EmergencyState>(_value));
				return;
			case 0x1ca79bd1e6cc8028ull:
				handle(std::static_pointer_cast<const ::pilot::IOBoardData>(_value));
				return;
			case 0x865aafd7c578368ull:
				handle(std::static_pointer_cast<const ::pilot::LaserScan>(_value));
				return;
			case 0xcdf63494e3518601ull:
				handle(std::static_pointer_cast<const ::pilot::OccupancyMapData>(_value));
				return;
			case 0xcecf75b564f86511ull:
				handle(std::static_pointer_cast<const ::pilot::Odometry>(_value));
				return;
			case 0xac30bf4b4195662full:
				handle(std::static_pointer_cast<const ::pilot::Path2D>(_value));
				return;
			case 0x77e97bf9a57eed03ull:
				handle(std::static_pointer_cast<const ::pilot::PlatformInfo>(_value));
				return;
			case 0x582f1fd83769573full:
				handle(std::static_pointer_cast<const ::pilot::Pose2D>(_value));
				return;
			case 0x680a097e50172f80ull:
				handle(std::static_pointer_cast<const ::pilot::PoseArray2D>(_value));
				return;
			case 0x83624e8e635643efull:
				handle(std::static_pointer_cast<const ::pilot::PowerState>(_value));
				return;
			case 0x94d1b110c5b3bdcbull:
				handle(std::static_pointer_cast<const ::pilot::RelayBoardData>(_value));
				return;
			case 0xb4bef4b6f7dbfaadull:
				handle(std::static_pointer_cast<const ::pilot::RoadMapData>(_value));
				return;
			case 0x6581fb0fdb31ddaeull:
				handle(std::static_pointer_cast<const ::pilot::SystemState>(_value));
				return;
			case 0x4850604e2930c0a0ull:
				handle(std::static_pointer_cast<const ::pilot::USBoardData>(_value));
				return;
			case 0x5c1d7427a54840d3ull:
				handle(std::static_pointer_cast<const ::pilot::kinematics::bicycle::DriveState>(_value));
				return;
			case 0x954b1e7cfbb6b85ull:
				handle(std::static_pointer_cast<const ::pilot::kinematics::differential::DriveState>(_value));
				return;
			case 0x746ce8edadd78a68ull:
				handle(std::static_pointer_cast<const ::pilot::kinematics::mecanum::DriveState>(_value));
				return;
			case 0x735822e6960c247ull:
				handle(std::static_pointer_cast<const ::pilot::kinematics::omnidrive::DriveState>(_value));
				return;
			default:
				_type_code = _type_code->super;
		}
	}
	handle(std::static_pointer_cast<const vnx::Value>(_value));
}

std::shared_ptr<vnx::Value> ROS_BridgeBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	switch(_method->get_type_hash()) {
		case 0x17f58f68bf83abc0ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_object_return::create();
			_return_value->_ret_0 = vnx_get_config_object();
			return _return_value;
		}
		case 0xbbc7f1a01044d294ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_return::create();
			_return_value->_ret_0 = vnx_get_config(_args->name);
			return _return_value;
		}
		case 0xca30f814f17f322full: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_object_return::create();
			vnx_set_config_object(_args->config);
			return _return_value;
		}
		case 0x362aac91373958b7ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_return::create();
			vnx_set_config(_args->name, _args->value);
			return _return_value;
		}
		case 0x305ec4d628960e5dull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
			_return_value->_ret_0 = vnx_get_type_code();
			return _return_value;
		}
		case 0xf6d82bdf66d034a1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_module_info_return::create();
			_return_value->_ret_0 = vnx_get_module_info();
			return _return_value;
		}
		case 0x9e95dc280cecca1bull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_restart>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_restart_return::create();
			vnx_restart();
			return _return_value;
		}
		case 0x7ab49ce3d1bfc0d2ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_stop>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_stop_return::create();
			vnx_stop();
			return _return_value;
		}
		case 0x6ce3775b41a42697ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_self_test_return::create();
			_return_value->_ret_0 = vnx_self_test();
			return _return_value;
		}
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : vnx::Hash64();
	_ex->method = _method->get_type_name();
	return _ex;
}


} // namespace pilot
} // namespace ros_bridge


namespace vnx {

void read(TypeInput& in, ::pilot::ros_bridge::ROS_BridgeBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.max_queue_ms_vnx, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[9]) {
			vnx::read_value(_buf + _field->offset, value.max_publish_queue_ros, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[10]) {
			vnx::read_value(_buf + _field->offset, value.max_subscribe_queue_ros, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.export_tf, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.import_map, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.export_map, type_code, _field->code.data()); break;
			case 3: vnx::read(in, value.pilot_topics, type_code, _field->code.data()); break;
			case 4: vnx::read(in, value.base_frame, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.odom_frame, type_code, _field->code.data()); break;
			case 6: vnx::read(in, value.map_frame, type_code, _field->code.data()); break;
			case 7: vnx::read(in, value.platform_interface_server, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::pilot::ros_bridge::ROS_BridgeBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = pilot::ros_bridge::vnx_native_type_code_ROS_BridgeBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::pilot::ros_bridge::ROS_BridgeBase>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(12);
	vnx::write_value(_buf + 0, value.max_queue_ms_vnx);
	vnx::write_value(_buf + 4, value.max_publish_queue_ros);
	vnx::write_value(_buf + 8, value.max_subscribe_queue_ros);
	vnx::write(out, value.export_tf, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.import_map, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.export_map, type_code, type_code->fields[2].code.data());
	vnx::write(out, value.pilot_topics, type_code, type_code->fields[3].code.data());
	vnx::write(out, value.base_frame, type_code, type_code->fields[4].code.data());
	vnx::write(out, value.odom_frame, type_code, type_code->fields[5].code.data());
	vnx::write(out, value.map_frame, type_code, type_code->fields[6].code.data());
	vnx::write(out, value.platform_interface_server, type_code, type_code->fields[7].code.data());
}

void read(std::istream& in, ::pilot::ros_bridge::ROS_BridgeBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::pilot::ros_bridge::ROS_BridgeBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::pilot::ros_bridge::ROS_BridgeBase& value) {
	value.accept(visitor);
}

} // vnx
