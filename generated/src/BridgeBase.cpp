
// AUTO GENERATED by vnxcppcodegen

#include <pilot/ros/package.hxx>
#include <pilot/ros/BridgeBase.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>
#include <vnx/Config.h>
#include <vnx/Binary.h>
#include <vnx/NoSuchMethod.hxx>
#include <automy/basic/Transform3D.hxx>
#include <pilot/LaserScan.hxx>
#include <pilot/Odometry.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.h>



namespace pilot {
namespace ros {


const vnx::Hash64 BridgeBase::VNX_TYPE_HASH(0x4deabea977d4c59bull);
const vnx::Hash64 BridgeBase::VNX_CODE_HASH(0x4f2377ffdc4dfed4ull);

BridgeBase::BridgeBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".input_laser_scans", input_laser_scans);
	vnx::read_config(vnx_name + ".input_odometry", input_odometry);
	vnx::read_config(vnx_name + ".input_tf_msgs", input_tf_msgs);
}

vnx::Hash64 BridgeBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* BridgeBase::get_type_name() const {
	return "pilot.ros.Bridge";
}
const vnx::TypeCode* BridgeBase::get_type_code() const {
	return pilot::ros::vnx_native_type_code_BridgeBase;
}

void BridgeBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = pilot::ros::vnx_native_type_code_BridgeBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, input_odometry);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, input_tf_msgs);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, input_laser_scans);
	_visitor.type_end(*_type_code);
}

void BridgeBase::write(std::ostream& _out) const {
	_out << "{\"__type\": \"pilot.ros.Bridge\"";
	_out << ", \"input_odometry\": "; vnx::write(_out, input_odometry);
	_out << ", \"input_tf_msgs\": "; vnx::write(_out, input_tf_msgs);
	_out << ", \"input_laser_scans\": "; vnx::write(_out, input_laser_scans);
	_out << "}";
}

void BridgeBase::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "input_laser_scans") {
			vnx::from_string(_entry.second, input_laser_scans);
		} else if(_entry.first == "input_odometry") {
			vnx::from_string(_entry.second, input_odometry);
		} else if(_entry.first == "input_tf_msgs") {
			vnx::from_string(_entry.second, input_tf_msgs);
		}
	}
}

vnx::Object BridgeBase::to_object() const {
	vnx::Object _object;
	_object["input_odometry"] = input_odometry;
	_object["input_tf_msgs"] = input_tf_msgs;
	_object["input_laser_scans"] = input_laser_scans;
	return _object;
}

void BridgeBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "input_laser_scans") {
			_entry.second.to(input_laser_scans);
		} else if(_entry.first == "input_odometry") {
			_entry.second.to(input_odometry);
		} else if(_entry.first == "input_tf_msgs") {
			_entry.second.to(input_tf_msgs);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const BridgeBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, BridgeBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* BridgeBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> BridgeBase::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "pilot.ros.Bridge";
	type_code->type_hash = vnx::Hash64(0x4deabea977d4c59bull);
	type_code->code_hash = vnx::Hash64(0x4f2377ffdc4dfed4ull);
	type_code->is_native = true;
	type_code->methods.resize(0);
	type_code->fields.resize(3);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "input_odometry";
		field.code = {23, 2, 4, 6, 12, 5, 12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "input_tf_msgs";
		field.code = {12, 12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "input_laser_scans";
		field.code = {13, 4, 12, 5, 12, 5};
	}
	type_code->build();
	return type_code;
}

void BridgeBase::vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) {
	const auto _type_hash = _sample->value->get_type_hash();
	if(_type_hash == 0xe762feb1b334b36dull) {
		auto _value = std::dynamic_pointer_cast<const ::automy::basic::Transform3D>(_sample->value);
		if(_value) {
			handle(_value, _sample);
		}
	} else if(_type_hash == 0x865aafd7c578368ull) {
		auto _value = std::dynamic_pointer_cast<const ::pilot::LaserScan>(_sample->value);
		if(_value) {
			handle(_value, _sample);
		}
	} else if(_type_hash == 0xcecf75b564f86511ull) {
		auto _value = std::dynamic_pointer_cast<const ::pilot::Odometry>(_sample->value);
		if(_value) {
			handle(_value, _sample);
		}
	}
}

std::shared_ptr<vnx::Value> BridgeBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _value, const vnx::request_id_t& _request_id) {
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : 0;
	_ex->method = _value->get_type_name();
	return _ex;
}


} // namespace pilot
} // namespace ros


namespace vnx {

void read(TypeInput& in, ::pilot::ros::BridgeBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.input_odometry, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.input_tf_msgs, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.input_laser_scans, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::pilot::ros::BridgeBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = pilot::ros::vnx_native_type_code_BridgeBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::pilot::ros::BridgeBase>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	vnx::write(out, value.input_odometry, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.input_tf_msgs, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.input_laser_scans, type_code, type_code->fields[2].code.data());
}

void read(std::istream& in, ::pilot::ros::BridgeBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::pilot::ros::BridgeBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::pilot::ros::BridgeBase& value) {
	value.accept(visitor);
}

} // vnx
