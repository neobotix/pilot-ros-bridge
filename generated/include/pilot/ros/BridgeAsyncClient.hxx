
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_ros_Bridge_ASYNC_CLIENT_HXX_
#define INCLUDE_pilot_ros_Bridge_ASYNC_CLIENT_HXX_

#include <vnx/AsyncClient.h>
#include <automy/basic/Transform3D.hxx>
#include <pilot/CostMapData.hxx>
#include <pilot/LaserScan.hxx>
#include <pilot/OccupancyMapData.hxx>
#include <pilot/Odometry.hxx>
#include <pilot/Path2D.hxx>
#include <pilot/Pose2D.hxx>
#include <pilot/PoseArray2D.hxx>
#include <pilot/RoadMapData.hxx>
#include <pilot/kinematics/differential/DriveState.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>


namespace pilot {
namespace ros {

class BridgeAsyncClient : public vnx::AsyncClient {
public:
	BridgeAsyncClient(const std::string& service_name);
	
	BridgeAsyncClient(vnx::Hash64 service_addr);
	
	uint64_t vnx_get_type_code(
			const std::function<void(::vnx::TypeCode)>& _callback = std::function<void(::vnx::TypeCode)>(),
			const std::function<void(const std::exception&)>& _error_callback = std::function<void(const std::exception&)>());
	
	std::vector<uint64_t> vnx_get_pending_ids() const override;
	
protected:
	void vnx_purge_request(uint64_t _request_id, const std::exception& _ex) override;
	
	void vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) override;
	
private:
	std::map<uint64_t, std::pair<std::function<void(::vnx::TypeCode)>, std::function<void(const std::exception&)>>> vnx_queue_vnx_get_type_code;
	
};


} // namespace pilot
} // namespace ros

#endif // INCLUDE_pilot_ros_Bridge_ASYNC_CLIENT_HXX_
